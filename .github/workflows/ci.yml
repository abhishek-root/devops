name: CI Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # build-test-lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Set up Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     # Install dependencies
  #     - name: Install dependencies
  #       run: |
  #         sudo apt remove man-db -y
  #         sudo apt install pylint python3-pytest python3-fastapi python3-httpx -y
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     # Run Linting
  #     - name: Run Pylint
  #       run: |
  #         pylint app/main.py
          
  #     # Run Tests
  #     - name: Run Unit Tests
  #       run: |
  #         pytest --maxfail=1 --disable-warnings -q

  # docker-build-push:
  #   runs-on: ubuntu-latest
  #   needs: build-test-lint  # Only runs if tests/lint pass

  #   steps:
  #     # Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Set up Docker Buildx
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Login to Docker Hub
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     # Build and Push Docker Image
  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-hello:latest

  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    #needs: docker-build-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Validate
        run: |
          terraform fmt 
          terraform validate
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  deploy-k8s:
    name: Install & Deploy to Kubernetes on Minikube
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install prerequisites and deploy app on VM
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VM_PUBLIC_IP }}
          username: abhi
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            sudo apt-get update
            sudo apt-get install -y snapd curl git docker.io
            
            sudo snap install microk8s --classic --channel=1.34/stable
            sudo usermod -aG microk8s $USER
            sudo chown -f -R $USER ~/.kube
            newgrp microk8s
            sudo microk8s enable dns dashboard ingress registry
            sudo microk8s status --wait-ready

            microk8s kubectl apply -f /home/abhi/k8s/deployment.yaml
            microk8s kubectl apply -f /home/abhi/k8s/service.yaml
            microk8s kubectl apply -f /home/abhi/k8s/ingress.yaml

            # Wait for rollout
            microk8s kubectl rollout status deployment/fastapi-app

            # Get service URL
            NODE_PORT=$(microk8s kubectl get svc fastapi-service -o jsonpath='{.spec.ports[0].nodePort}')
            echo "Your app is accessible at: http://${{ secrets.VM_HOST }}:$NODE_PORT"