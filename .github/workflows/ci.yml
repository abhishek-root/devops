name: CI Pipeline
on:
  push:
    branches:
      - main
      - dev

jobs:
   build-test-lint:
     runs-on: ubuntu-latest

     steps:
       # Checkout code
       - name: Checkout code
         uses: actions/checkout@v4

       # Set up Python
       - name: Set up Python
         uses: actions/setup-python@v5
         with:
           python-version: "3.11"

       # Install dependencies
       - name: Install dependencies
         run: |
           sudo apt remove man-db -y
           sudo apt install pylint python3-pytest python3-fastapi python3-httpx -y
           python -m pip install --upgrade pip
           pip install -r requirements.txt

       # Run Linting
       - name: Run Pylint
         run: |
           pylint app/main.py
          
       # Run Tests
       - name: Run Unit Tests
         run: |
           pytest --maxfail=1 --disable-warnings -q

   docker-build-push:
     runs-on: ubuntu-latest
     needs: build-test-lint  
     if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

     steps:
       # Checkout code
       - name: Checkout code
         uses: actions/checkout@v4

       # Set up Docker Buildx
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3

       # Login to Docker Hub
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}

       # Build and Push Docker Image
       - name: Build and Push Docker Image
         uses: docker/build-push-action@v6
         with:
           context: .
           push: true
           tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-hello:latest

   terraform_plan_validate:
      name: Terraform Plan & validate
      runs-on: ubuntu-latest
      needs: docker-build-push
      if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.6.0

        - name: Terraform Init
          run: terraform init
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        - name: Terraform Validate
          run: |
            terraform fmt 
            terraform validate
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        - name: Terraform Plan
          run: terraform plan -out=tfplan
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

   terraform_apply:
      name: Terraform Apply
      runs-on: ubuntu-latest
      needs: terraform_plan_validate
      if: github.ref == 'refs/heads/main'

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.6.0

        - name: Terraform Init
          run: terraform init
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        - name: Terraform Validate
          run: |
            terraform fmt 
            terraform validate
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        - name: Terraform Plan
          run: terraform plan -out=tfplan
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        - name: Terraform Apply
          if: github.ref == 'refs/heads/main'
          run: terraform apply -auto-approve tfplan
          working-directory: infra
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

   deploy-k8s:
      name: Install & Deploy to Kubernetes on Minikube
      runs-on: ubuntu-latest
      needs: terraform_apply
      if: github.ref == 'refs/heads/main'

      steps:
        - name: Checkout repo
          uses: actions/checkout@v4

        - name: Copy manifests to VM using sshpass
          run: |
            sudo apt-get update
            sudo apt-get install -y sshpass
            sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no abhi@${{ secrets.VM_PUBLIC_IP }} "mkdir -p ~/k8s"
            sshpass -p "${{ secrets.VM_PASSWORD }}" scp -o StrictHostKeyChecking=no k8s/*.yaml abhi@${{ secrets.VM_PUBLIC_IP }}:~/k8s/

        - name: Install prerequisites and deploy app on VM
          uses: appleboy/ssh-action@v0.1.9
          with:
            host: ${{ secrets.VM_PUBLIC_IP }}
            username: abhi
            password: ${{ secrets.VM_PASSWORD }}
            script: |
              
              microk8s version
              echo "microk8s installed"
              microk8s kubectl apply -f ~/k8s
              pubip=$(curl -s ifconfig.me) 
            
              NODE_PORT=$(microk8s kubectl get svc fastapi-service -o jsonpath='{.spec.ports[0].nodePort}')
              echo "Your app is accessible at: http://$pubip:$NODE_PORT"