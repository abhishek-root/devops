name: CI Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # build-test-lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Set up Python
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.11"

  #     # Install dependencies
  #     - name: Install dependencies
  #       run: |
  #         sudo apt remove man-db -y
  #         sudo apt install pylint python3-pytest python3-fastapi python3-httpx -y
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     # Run Linting
  #     - name: Run Pylint
  #       run: |
  #         pylint app/main.py
          
  #     # Run Tests
  #     - name: Run Unit Tests
  #       run: |
  #         pytest --maxfail=1 --disable-warnings -q

  # docker-build-push:
  #   runs-on: ubuntu-latest
  #   needs: build-test-lint  # Only runs if tests/lint pass

  #   steps:
  #     # Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Set up Docker Buildx
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     # Login to Docker Hub
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     # Build and Push Docker Image
  #     - name: Build and Push Docker Image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-hello:latest

  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    #needs: docker-build-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Validate
        run: |
          terraform fmt 
          terraform validate
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: infra
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  deploy-k8s:
    name: Install & Deploy to Kubernetes on Minikube
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install prerequisites and deploy app on VM
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VM_PUBLIC_IP }}
          username: abhi
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            echo "Updating & installing dependencies"
            sudo apt update
            sudo apt install -y curl wget apt-transport-https ca-certificates software-properties-common gnupg lsb-release

            echo "Installing Docker"
            curl -fsSL https://get.docker.com | sudo bash
            sudo usermod -aG docker abhi

            echo "Installing kubectl"
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt update
            sudo apt install -y kubectl

            echo "Installing Helm"
            curl https://baltocdn.com/helm/signing.asc | sudo gpg --dearmor -o /usr/share/keyrings/helm.gpg
            echo "deb [signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
            sudo apt update
            sudo apt install -y helm

            echo "Installing Minikube"
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            chmod +x minikube
            sudo mv minikube /usr/local/bin/

            echo "Verifying installations"
            docker --version
            kubectl version --client
            helm version
            minikube version

            echo "Pulling Docker image from Docker Hub"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-hello:latest
            minikube image load ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-hello:latest

            echo "Deploying Kubernetes manifests"
            kubectl apply -f /home/abhi/app/k8s/deployment.yaml
            kubectl apply -f /home/abhi/app/k8s/service.yaml
            kubectl apply -f /home/abhi/app/k8s/ingress.yaml

            echo "Installing Nginx Ingress Controller"
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
            helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
              --set controller.publishService.enabled=true

            echo "Deployment verification"
            kubectl get pods
            kubectl get svc
            kubectl get ingress
